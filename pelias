#! /usr/bin/env bash

help_message=$(cat << "EOF"
usage: pelias --help | <subcommand>[#<tag>] <script> [scriptArgs]

`pelias` is a lightweight tool that abstracts away all of the Pelias
repositories behind one CLI, so that users no longer have to worry about
cloning, installing, and generally dealing with multiple moving parts in
different places (like the API, schema, and various importers). The tool
accepts two parameters: the repository to target, and the script inside it to
run. `pelias api start` will target the `start` script inside the
`github.com/pelias/api` repository. The scripts are defined inside that
repository's `package.json`'s `scripts` object; in other words, they're
anything that can be executed via `npm run` inside that package.

Repositories will be stored inside `~/.pelias/`. When one is invoked and isn't
found locally, it'll be cloned and `npm install`'d; otherwise, the tool will
check for upstream changes and pull them in/reinstall packages if necessary.

	--help: Print this help message and exit.
	<subcommand>: The name of the repository under github.com/pelias/ to target.
	[<tag>]: A specific commit hash, branch name, or tag to `git checkout`
		inside the <subcommand> repo.
	<script>: The script defined inside the <subcommand> repo's package.json to
		run.  If missing, all available scripts will be listed.
	[args]: Any args to pass to <script>

Examples:

	pelias api start
	pelias geonames#a04dfe import
	pelias openstreetmap#experimental-branch import

EOF
)

if [ -z "$1" ]; then
	>&2 echo 'Missing argument. `pelias --help`'
	>&2 echo "$help_message"
	exit 1
elif [ "$1" = "--help" ]; then
	echo "$help_message"
	exit 0
else
	if [ -z "$2" ]; then
		>&2 echo 'Missing script argument. `pelias --help` for details.'
	fi

	IFS="#"
	components=($1)
	subcommand="${components[0]}"
	branch=${components[1]}
	if [ "$branch" = "" ]; then
		branch=master
	fi
	script="$2"
	script_args=(${@:3})
fi

pelias_dir=~/.pelias
if ! [ -d "$pelias_dir" ]; then
	mkdir "$pelias_dir"
fi

cd "$pelias_dir"
if ! [ -d "$subcommand" ]; then
	echo "$subcommand not found in cache."
	echo "Cloning $subcommand."
	git clone -q "git@github.com:pelias/$subcommand"
	if [ $? -ne 0 ]; then
		>&2 echo "$subcommand does not exist!"
		exit 1
	fi
	echo "Installing dependencies."
	cd "$subcommand"
	git checkout -q $branch
	npm install > /dev/null
else
	cd "$subcommand"
	git checkout -q $branch
	if ! [ "$(git fetch --dry-run)" = "" ]; then
		echo "Updating $subcommand."
		git pull
		npm install
	fi
fi

if [ -z $script ]; then
	npm run
else
	npm -s run $script -- ${script_args[@]}
fi
